# -*- coding: utf-8 -*-
"""fitness.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pREAgDiF_vf9ie7hoXlt50Mli22Vp7sw

# **Exploring Obesity Levels: Insights from  Physical Condition and Gym Exercise Patterns**

<h2>Table of Contents</h2>
<ul>
<li>Introduction</li>
<li>Data Wrangling</li>
<li>Data Cleaning</li>
<li>Exploratory Data Analysis</li>
<li>Conclusions</li>
</ul>

# **Introduction**

Obesity represents an increasing global health issue, shaped by a combination of lifestyle choices, eating behaviors, and levels of physical activity. Gaining a clear understanding of the elements that contribute to obesity and recognizing behavior patterns can assist in creating effective strategies and interventions to tackle this problem. This project integrates two complementary datasets to examine the interaction between eating behaviors, physical health, and exercise habits.

The first dataset, “Estimation of Obesity Levels Based on Eating Habits and Physical Condition,” sheds light on obesity rates among individuals in Mexico, Peru, and Colombia. It encompasses details such as dietary practices, levels of physical activity, and classifications of obesity ranging from underweight to various obesity categories. This dataset acts as a basis for investigating the correlation between lifestyle choices and body weight along with overall health.

The second dataset, “Gym Members Exercise Tracking”, records comprehensive exercise behaviors, including workout intensity, heart rate, BMI, and level of experience. This information provides a deeper understanding of physical activity, which is vital for addressing obesity and enhancing overall fitness.

By merging these datasets, this project aims to:

Examine the connections between dietary habits, physical activity, and levels of obesity.
Recognize patterns in exercise behaviors that lead to improved health results.
Offer insights into how dietary and physical elements can collectively affect obesity and fitness advancement.
Through statistical analysis, data visualization, and predictive modeling, this study aspires to deliver practical insights regarding the factors affecting obesity and emphasize opportunities for fostering healthier lifestyles.

# Data Wrangling

## **Importing needed library**
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import warnings
import seaborn as sns
# Suppress FutureWarnings
warnings.simplefilter(action='ignore', category=FutureWarning)

"""## Loading DataSets In Different Ways

**Load "gym_members_exercise_tracking.csv" file Manually**
"""

data=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/gym_members_exercise_tracking.csv')
data.head()

"""**Load the dataset "Estimation of Obesity Levels Based On Eating Habits and Physical Condition" through APIs, utilizing the ucimlrepo library to fetch datasets from the UCI ML Repository automatically.**"""

pip install ucimlrepo

from ucimlrepo import fetch_ucirepo

# fetch dataset
estimation_of_obesity_levels_based_on_eating_habits_and_physical_condition = fetch_ucirepo(id=544)

# data (as pandas dataframes)
X = estimation_of_obesity_levels_based_on_eating_habits_and_physical_condition.data.features
y = estimation_of_obesity_levels_based_on_eating_habits_and_physical_condition.data.targets

# metadata
print(estimation_of_obesity_levels_based_on_eating_habits_and_physical_condition.metadata)

# variable information
print(estimation_of_obesity_levels_based_on_eating_habits_and_physical_condition.variables)

"""# Data Assessing

## Dropping unuseful columns and doing some enhancements on 'DATA' dataset
"""

#drop unusfule column from Data dataset
columns = ['Max_BPM', 'Avg_BPM', 'Resting_BPM', 'Session_Duration (hours)', 'Calories_Burned', 'Experience_Level','Fat_Percentage']
data = data.drop(columns=columns) # Drop the specified columns

"""Renaming Columns"""

# Dictionary for renaming columns
columns_rename = {
    'Workout_Frequency (days/week)': 'Workout(days/week)'
}

# Renaming the columns in data
data = data.rename(columns=columns_rename)

# Verify the changes
print(data.columns)

data.head() # Display the first few rows of the dataset

data.info() # Check data types and missing values

data.isnull().sum() # Check for missing values

data.duplicated().sum()  # Check for duplicates

data.columns

"""## Dropping unuseful columns and doing some enhancements on 'X' dataset"""

# List of columns to drop
columns_to_drop = ['family_history_with_overweight', 'FAVC', 'FCVC', 'NCP', 'CAEC', 'SMOKE', 'CALC', 'MTRANS','SCC','TUE']

# Dropping the columns from the dataframe
X=X.drop(columns=columns_to_drop)

# Verify the columns were removed
print(X.columns)

""" Renaming Columns"""

# Dictionary for renaming columns
columns_to_rename = {
    'Height': 'Height (m)',
    'Weight': 'Weight (kg)',
    'CH2O': 'Water_Intake (liters)',
    'FAF': 'Workout(days/week)'
}

# Renaming the columns in X
X = X.rename(columns=columns_to_rename)

# Verify the changes
print(X.columns)

""" Casting Needed Types"""

# Convert the 'Workout(days/week)' column to integer type
X['Workout(days/week)'] = X['Workout(days/week)'].astype(int)
X['Age'] = X['Age'].astype(int)  # Convert the 'Age' column to integer type

# Check the first few rows of the feature data
print(X.head())

print(X.isnull().sum()) # Check for missing values

print(X.duplicated().sum())  # Check for duplicates

X = X.drop_duplicates()  # Remove duplicates
print(f"Number of duplicates in X after removal: {X.duplicated().sum()}") # Verify the removal of duplicates

"""# Data Cleaning"""

# Frequency count
frequency = data['Workout_Type'].value_counts()

# Plotting with a Seaborn color palette
plt.figure(figsize=(10, 6))
sns.barplot(x=frequency.index, y=frequency.values, palette='Set2')
plt.title('Frequency of Workout Types')
plt.xlabel('Workout Type')
plt.ylabel('Frequency')
plt.show()

# Group by 'Workout_Type' and 'Gender' and count the occurrences
grouped_data = data.groupby(['Workout_Type', 'Gender']).size().reset_index(name='Frequency')

# Plotting the barplot
plt.figure(figsize=(14, 6))
sns.barplot(x='Workout_Type', y='Frequency', hue='Gender', data=grouped_data, palette='Set1')
plt.title('Frequency of Workout Types by Gender')
plt.xlabel('Workout Type')
plt.ylabel('Frequency')
plt.legend(title='Gender', loc='upper right')
plt.show()

#The Yoga result is interesting
data.shape

max_bmi = data['BMI'].max()
print(f"The maximum BMI is: {max_bmi}")

"""Add BMI COLUMN to X dataset"""

# Ensure no division by zero (Height should not be zero)
X = X[X['Height (m)'] > 0]

# Calculate BMI using Weight and Height from the X dataset
X['BMI'] = X['Weight (kg)'] / (X['Height (m)'] ** 2)

# Display the updated X dataset
print(X.head())

"""Checking BMI DATA TYPE"""

print(X.info())

"""Fix the issue by Rounding"""

X['BMI'] = X['BMI'].round(2)  # Round BMI to 2 decimal places
print(X.head())  # Display the updated X dataset

# Strip leading/trailing spaces
X['Gender'] = X['Gender'].str.strip()
data['Gender'] = data['Gender'].str.strip()

# Make sure the case is consistent
X['Gender'] = X['Gender'].str.lower()
data['Gender'] = data['Gender'].str.lower()

"""Removing Work_out Column"""

data = data.drop('Workout_Type', axis=1) # Drop the 'Workout_Type' column from the 'data' dataset

data.head()

X.head()

"""**So now same columns in both datasets**"""

# Concatenate the two datasets along rows (axis=0)
combined_data = pd.concat([X, data], ignore_index=True)

print(combined_data.columns)  # Check the column names

combined_data.shape

# Check for missing values
print(combined_data.isnull().sum())

combined_data.duplicated().sum()

combined_data.info()

# save the combine 'combined_data' in a csv file

# Assuming 'combined_data' DataFrame is already created as in your provided code.
combined_data.to_csv('combined_data.csv', index=False)  # Save to CSV, no index column

"""# Analysis and Questions

## Analysis
"""

# Create a Strip Plot to show individual BMI data points by Gender
plt.figure(figsize=(8, 6))
sns.stripplot(x='Gender', y='BMI', data=combined_data, jitter=True, palette='Set2')
plt.title('Individual BMI Data Points by Gender')
plt.xlabel('Gender')
plt.ylabel('BMI')
plt.show()

"""### Check the percentage of obesity.

30 or more (BMI) Values may indicate obese
"""

# Filter the dataset where BMI >= 30
high_bmi =combined_data[combined_data['BMI'] >= 30]

# Count the number of rows (individuals) with BMI >= 30
count_high_bmi = len(high_bmi)

# Display the result
print(f"Number of individuals with BMI >= 30: {count_high_bmi}")

percentage_bmi_30 = (len(high_bmi) / len(combined_data)) * 100  # Calculate the percentage
print(f"Percentage of individuals with BMI >= 30: {percentage_bmi_30:.2f}%")  # Display the result with 2 decimal places

# Filter the dataset where BMI >= 30
high_bmi = combined_data[combined_data['BMI'] >= 30]

# Group by Age and Gender to count the number of individuals with BMI >= 30
grouped_bmi = high_bmi.groupby(['Age', 'Gender']).size().reset_index(name='Count')

# Plotting the data
plt.figure(figsize=(12, 6))
sns.barplot(x='Age', y='Count', hue='Gender', data=grouped_bmi, palette='Set1')

# Adding title and labels
plt.title('Distribution of BMI >= 30 by Age and Gender')
plt.xlabel('Age')
plt.ylabel('Number of Individuals with BMI >= 30')
plt.legend(title='Gender')

plt.show()

# Filter the dataset where BMI >= 30
high_bmi = combined_data[combined_data['BMI'] >= 30]

# Group by Age to count the number of individuals with BMI >= 30
grouped_bmi_age = high_bmi.groupby('Age').size().reset_index(name='Count')

# Plotting the data
plt.figure(figsize=(12, 6))
sns.barplot(x='Age', y='Count', data=grouped_bmi_age, palette='Set2')

# Adding title and labels
plt.title('Distribution of BMI >= 30 by Age')
plt.xlabel('Age')
plt.ylabel('Number of Individuals with BMI >= 30')

plt.show()

# Find the row with the maximum BMI
max_bmi_row = combined_data.loc[combined_data['BMI'].idxmax()]

# Display the maximum BMI value and its corresponding data
max_bmi_value = max_bmi_row['BMI']
print("Maximum BMI:", max_bmi_value)
print("Data corresponding to maximum BMI:")
print(max_bmi_row)

# Gender                    male
# Age                         47
# Height (m)                1.93
# Weight (kg)               45.9
# Water_Intake (liters)      2.0
# Workout(days/week)           3
# BMI                      12.32

# Add BMI categories based on the classification
def classify_bmi(bmi):
    if bmi < 18.5:
        return 'Underweight'
    elif 18.5 <= bmi < 25:
        return 'Normal Weight'
    elif 25 <= bmi < 30:
        return 'Overweight'
    else:
        return 'Obese'

combined_data['BMI_Category'] = combined_data['BMI'].apply(classify_bmi)

bmi_counts = combined_data['BMI_Category'].value_counts()
print(bmi_counts)

plt.figure(figsize=(10, 6))
sns.countplot(data=combined_data, x='BMI_Category', order=['Underweight', 'Normal Weight', 'Overweight', 'Obese'], palette='coolwarm')

# Adding labels and title
plt.title('Distribution of BMI Categories', fontsize=16)
plt.xlabel('BMI Category', fontsize=12)
plt.ylabel('Frequency', fontsize=12)

plt.show()

sns.boxplot(data=combined_data, x='Workout(days/week)', y='BMI', palette='magma')
plt.title('Workout Frequency vs BMI')
plt.xlabel('Workout Frequency (days/week)')
plt.ylabel('BMI')
plt.show()

sns.scatterplot(data=combined_data, x='Height (m)', y='Weight (kg)', hue='BMI', palette='coolwarm', size='BMI', sizes=(20, 200))
plt.title('Weight vs Height with BMI Intensity')
plt.xlabel('Height (m)')
plt.ylabel('Weight (kg)')
plt.show()

"""## Questions

### 1. Does exercise preference differ by gender?
The chart "Frequency of Exercise Types by Gender" shows that males exercise more often than females. Males mainly prefer strength training and yoga, while females focus on cardio and strength exercises.
### 2. How do BMI values differ between the genders?
 Body Mass Index (BMI) values exhibit variations between the genders, with a notable concentration observed in females.
### 3. What is the percentage of obesity in the data set?
 38.15% of the people have a BMI >=30
### 4. How do BMI values ​​differ between ages and genders?
The highest proportion of individuals with a BMI over 30 (obese) was among adolescents and young adults aged 17 to 40. More males had a BMI above 30, but the highest recorded BMI was 50.81 in a 21-year-old female, while the lowest was 12.32 in a 47-year-old male.
### 5. Is BMI affected by age?
A noticeable increase in BMI levels among people in their twenties, often exceeding normal ranges.
### 6. How are BMI categories distributed?
The dataset encompasses a diverse population across various Body Mass Index (BMI) categories, with the high BMI (OBESE) category exhibiting the most significant representation.
### 7. Do movement and workout affect the body mass index?
Yes, it appears to us that with regular physical activity five days a week, the body mass index appears healthy. With a lack of physical activity, there is a noticeable increase, so it is good to do physical activity at least two days a week.
### 8. What is the relationship between height, weight, and body mass index (BMI)?
 Research indicates that body mass index (BMI) decreases as weight loss occurs and increases with height. Conversely, BMI tends to rise in response to weight gain.

# Conclusion

### In conclusion, the analysis reveals significant differences in exercise preferences and Body Mass Index (BMI) based on gender and age. Males tend to exercise more frequently and prefer specific workouts, while females gravitate towards different modalities. With rising obesity rates, especially among younger individuals, promoting regular physical activity is crucial for maintaining a healthy BMI.

### It’s essential to develop gender-inclusive fitness programs that incorporate diverse activities like strength training, cardio, and yoga to encourage widespread participation. Public health campaigns should emphasize exercise at least two to five days a week, particularly targeting adolescents and young adults. Providing educational resources about BMI and health can empower informed lifestyle choices. Creating supportive environments, like parks and recreational centers, will further facilitate regular exercise. By implementing these strategies, communities can reduce obesity rates and foster healthier lifestyles, enhancing overall public health outcomes.
"""